
local M = {}
local HI, GI, DI = has_alife_info, give_info, disable_info
local DEBUG_MODE = true

function on_game_start()
    RegisterScriptCallback("save_state",save_state)
    RegisterScriptCallback("load_state",load_state)
	RegisterScriptCallback("actor_on_first_update",clean_quest_vars)
end

function save_state(m)
	m.as_quest_csky = M
end

function load_state(m)
	M = m.as_quest_csky or {}
end

function clean_quest_vars()
	for task_id,v in pairs(M) do
		if (task_id and HI(task_id.."_complete")) then
			M[task_id] = nil
		end
	end
end
--=============================================================
local STAGE_STATUS = {}
local STAGE_TARGET = {}

local cold_story_id = "mar_smart_terrain_base_stalker_leader_marsh"
local smart_base_jup = "jup_b205_smart_terrain"
local smart_base_mar = "mar_smart_terrain_base"
--=============================================================
--main_0
--=============================================================
STAGE_STATUS["main_0"] = function(tsk,task_id)
	if not HI(task_id.."_time_up") then
		if HI(task_id.."_donate_1") or HI(task_id.."_donate_2") or HI(task_id.."_donate_3") then
			local gt = math.floor(game.get_game_time():diffSec(level.get_start_time()))
			
			if not tonumber(M[task_id]) then
				M[task_id] = tonumber(gt)
			end
			
			if (DEBUG_MODE) then
				GI(task_id.."_time_up")
			end
			if (HI(task_id.."_donate_1") and (tonumber(gt) > tonumber(M[task_id]) + 86400*7)) then
				GI(task_id.."_time_up")
			end
			if (HI(task_id.."_donate_2") and (tonumber(gt) > tonumber(M[task_id]) + 86400*5)) then
				GI(task_id.."_time_up")
			end
			if (HI(task_id.."_donate_3") and (tonumber(gt) > tonumber(M[task_id]) + 86400*2)) then
				GI(task_id.."_time_up")
			end
		end
	end
	
	if HI(task_id.."_new_base") then
		if not get_story_se_object("as_npc_csky_leader") then
			local smart	= SIMBOARD.smarts_by_names[smart_base_jup]
			local se = alife():create("as_npc_csky_leader",smart.position,smart.m_level_vertex_id,smart.m_game_vertex_id)
		end
		if not get_story_se_object("as_squad_csky_base_guard") then
			utils_obj.create_squad("as_squad_csky_base_guard",smart_base_jup)
		end
	end
	
	if HI(task_id.."_talk") then
		if not HI(task_id.."_complete") then
			GI(task_id.."_complete")
		end
	end
end

STAGE_TARGET["main_0"] = function(task_id,field,p,tsk)
	if (field == "target") then
		if not (HI(task_id.."_donate_1") or HI(task_id.."_donate_2") or HI(task_id.."_donate_3")) then
			local npc = get_story_se_object(cold_story_id)
			return npc and npc.id or nil
		end
		
		if not HI(task_id.."_time_up") then
			return
		end
		
		if not HI(task_id.."_new_base") then
			local npc = get_story_se_object(cold_story_id)
			return npc and npc.id or nil
		end
		
		local npc = get_story_se_object("as_npc_csky_leader") or get_story_se_object(cold_story_id)
		return npc and npc.id or nil
	end
	
	if (field == "title") then
		return task_id.."_"..field
	end
	
	if (field == "descr") then
		if not (HI(task_id.."_donate_1") or HI(task_id.."_donate_2") or HI(task_id.."_donate_3")) then
			return task_id.."_"..field.."_1"
		end
		if HI(task_id.."_donate_1") and not HI(task_id.."_new_base") then
			return task_id.."_"..field.."_2"
		end
		if HI(task_id.."_donate_2") and not HI(task_id.."_new_base") then
			return task_id.."_"..field.."_3"
		end
		if HI(task_id.."_donate_3") and not HI(task_id.."_new_base") then
			return task_id.."_"..field.."_4"
		end
		return task_id.."_"..field.."_5"
	end
end

function main_0_has_1(a,b)
	return _G["as_quest"]["money"]("has",50000)
end
function main_0_has_2(a,b)
	return _G["as_quest"]["money"]("has",70000)
end
function main_0_has_3(a,b)
	return _G["as_quest"]["money"]("has",100000)
end
function main_0_donate_1(a,b)
	_G["as_quest"]["money"]("pay",50000)
	GI("as_quest_csky_main_0_donate_1")
end
function main_0_donate_2(a,b)
	_G["as_quest"]["money"]("pay",70000)
	GI("as_quest_csky_main_0_donate_2")
end
function main_0_donate_3(a,b)
	_G["as_quest"]["money"]("pay",100000)
	GI("as_quest_csky_main_0_donate_3")
end

function main_0_new_base_condition(a,b)
	if HI("as_quest_csky_main_0_new_base") then
		return false
	end
	if HI("as_quest_csky_main_0_donate_1")
	or HI("as_quest_csky_main_0_donate_2")
	or HI("as_quest_csky_main_0_donate_3") then
		return true
	end
	return false
end
function main_0_new_base_reward(a,b)
	_G["as_quest"]["reward"]({"wpn_wincheaster1300"})
	_G["as_quest"]["reward"]({"ammo_12x70_buck","ammo_12x70_buck","ammo_12x70_buck","ammo_12x70_buck","ammo_12x70_buck"})
	GI("as_quest_csky_main_0_new_base")
end

function main_0_talk_is_csky(a,b)
	return string.find(character_community(db.actor),"csky")
end
function main_0_talk_not_csky(a,b)
	return not main_0_talk_is_csky(a,b)
end
function main_0_talk_reward(a,b)
	_G["as_quest"]["reward"]({"ration_ru","vodka"})
	GI("as_quest_csky_main_0_talk")
end

--=============================================================
--main_1
--=============================================================
STAGE_STATUS["main_1"] = function(tsk,task_id)
	local npc_1 = get_story_se_object("as_npc_csky_trader")
	local npc_2 = get_story_se_object("as_npc_csky_tech")
	local npc_3 = get_story_se_object("as_npc_csky_medic")
	
	if not (npc_1) then
		local smart	= SIMBOARD.smarts_by_names[smart_base_mar]
		local se = alife():create("as_npc_csky_trader",smart.position,smart.m_level_vertex_id,smart.m_game_vertex_id)
	end
	if not (npc_2) then
		local smart	= SIMBOARD.smarts_by_names["zat_stalker_base_smart"]
		local se = alife():create("as_npc_csky_tech",smart.position,smart.m_level_vertex_id,smart.m_game_vertex_id)
	end
	if not (npc_3) then
		local smart	= SIMBOARD.smarts_by_names["mar_smart_terrain_doc_2"]
		local se = alife():create("as_npc_csky_medic",smart.position,smart.m_level_vertex_id,smart.m_game_vertex_id)
	end
	
	local sim = alife()
	local gg = game_graph()
	local actor_lvl = level.name()
	local npc_1_lvl = npc_1 and sim:level_name(gg:vertex(npc_1.m_game_vertex_id):level_id())
	local npc_2_lvl = npc_2 and sim:level_name(gg:vertex(npc_2.m_game_vertex_id):level_id())
	local npc_3_lvl = npc_3 and sim:level_name(gg:vertex(npc_3.m_game_vertex_id):level_id())
	
	if (actor_lvl and npc_1_lvl and npc_2_lvl and npc_3_lvl) then
		if HI("as_quest_csky_trader_0_complete") and not string.find(npc_1_lvl,"jupiter") and not string.find(npc_1_lvl,actor_lvl) then
			GI("as_quest_csky_trader_0_tele")
			local smart	= SIMBOARD.smarts_by_names[smart_base_jup]
			TeleportObject(npc_1.id,smart.position,smart.m_level_vertex_id,smart.m_game_vertex_id)
		end
		if HI("as_quest_csky_tech_0_complete") and not string.find(npc_2_lvl,"jupiter") and not string.find(npc_2_lvl,actor_lvl) then
			GI("as_quest_csky_tech_0_tele")
			local smart	= SIMBOARD.smarts_by_names[smart_base_jup]
			TeleportObject(npc_2.id,smart.position,smart.m_level_vertex_id,smart.m_game_vertex_id)
		end
		if HI("as_quest_csky_medic_0_complete") and not string.find(npc_3_lvl,"jupiter") and not string.find(npc_3_lvl,actor_lvl) then
			GI("as_quest_csky_medic_0_tele")
			local smart	= SIMBOARD.smarts_by_names[smart_base_jup]
			TeleportObject(npc_3.id,smart.position,smart.m_level_vertex_id,smart.m_game_vertex_id)
		end
	end
	
	if not HI("as_quest_csky_trader_0_started") then
		task_manager.get_task_manager():give_task("as_quest_csky_trader_0")
	end
	if not HI("as_quest_csky_tech_0_started") then
		task_manager.get_task_manager():give_task("as_quest_csky_tech_0")
	end
	if not HI("as_quest_csky_medic_0_started") then
		task_manager.get_task_manager():give_task("as_quest_csky_medic_0")
	end
	
	if HI(task_id.."_reward") then
		if not HI(task_id.."_complete") then
			GI(task_id.."_complete")
		end
	end
end

STAGE_TARGET["main_1"] = function(task_id,field,p,tsk)
	if (field == "target") then
		if not (HI("as_quest_csky_trader_0_complete") and HI("as_quest_csky_tech_0_complete") and HI("as_quest_csky_medic_0_complete")) then
			return
		end
		local npc = get_story_se_object("as_npc_csky_leader")
		return npc and npc.id
	end
	
	if (field == "title") then
		return task_id.."_"..field
	end
	
	if (field == "descr") then
		return task_id.."_"..field
	end
end

function main_1_give(a,b)
	task_manager.get_task_manager():give_task("as_quest_csky_main_1")
end

function main_1_reward(a,b)
	_G["as_quest"]["reward"]({"ration_ru","vodka"})
	GI("as_quest_csky_main_1_reward")
end

--=============================================================
--main_2
--=============================================================
STAGE_STATUS["main_2"] = function(tsk,task_id)
	if HI("as_quest_csky_trader_1_complete") then
		GI(task_id.."_complete")
	end
	if HI("as_quest_csky_tech_1_complete") then
		GI(task_id.."_complete")
	end
	if HI("as_quest_csky_medic_1_complete") then
		GI(task_id.."_complete")
	end
end

STAGE_TARGET["main_2"] = function(task_id,field,p,tsk)
	if (field == "target") then
		return
	end
	
	if (field == "title") then
		return task_id.."_"..field
	end
	
	if (field == "descr") then
		return task_id.."_"..field
	end
end

function main_2_give(a,b)
	task_manager.get_task_manager():give_task("as_quest_csky_main_2")
end

--=============================================================
--main_3
--=============================================================
STAGE_STATUS["main_3"] = function(tsk,task_id)
	if not M[task_id] then M[task_id] = {} end
	local sim = alife()
	local npc_sec = "as_npc_csky_main_3_monolith"
	local psi_sec = "as_script_psy_generator"
	
	if not HI(task_id.."_dead") then
		local id = 	tonumber(M[task_id][0])
		if not (id) then
			local pos = vector():set(402,-3,242)
			local vid = level.vertex_id(pos)
			local gid = SIMBOARD.smarts_by_names["zat_b14_smart_terrain"].m_game_vertex_id
			local se = sim:create(psi_sec,pos,vid,gid)
			M[task_id][0] = se.id
		else
			if (M[task_id]["0_dead"] ~= true) then
				local psi = id and sim:object(id)
				if not (psi and string.find(psi:name(),psi_sec)) then
					M[task_id]["0_dead"] = true
				end
			end
		end
		
		for i=1,8 do
			id = tonumber(M[task_id][i])
			if not (id) then
				local smart	= SIMBOARD.smarts_by_names["zat_b14_smart_terrain"]
				local se = sim:create(npc_sec,smart.position,smart.m_level_vertex_id,smart.m_game_vertex_id)
				M[task_id][i] = se.id
			else
				if (M[task_id][i.."_dead"] ~= true) then
					local npc = id and sim:object(id)
					if not (npc and string.find(npc:name(),npc_sec) and npc:alive()) then
						M[task_id][i.."_dead"] = true
					end
				end
			end
		end
		
		for i=0,8 do
			if (M[task_id][i.."_dead"] == true) then
				if (i == 8) then
					GI(task_id.."_dead")
				end
			else
				break
			end
		end
	end
	
	if HI(task_id.."_reward") then
		if not HI(task_id.."_complete") then
			GI(task_id.."_complete")
		end
	end
end

STAGE_TARGET["main_3"] = function(task_id,field,p,tsk)
	if (field == "target") then
		if not HI(task_id.."_dead") then
			local smart	= SIMBOARD.smarts_by_names["zat_b14_smart_terrain"]
			return smart and smart.id
		end
		local npc = get_story_se_object("as_npc_csky_leader")
		return npc and npc.id
	end
	
	if (field == "title") then
		return task_id.."_"..field
	end
	
	if (field == "descr") then
		if not HI(task_id.."_dead") then
			return task_id.."_"..field.."_1"
		end
		return task_id.."_"..field.."_2"
	end
end

function main_3_give(a,b)
	task_manager.get_task_manager():give_task("as_quest_csky_main_3")
end
function main_3_reward(a,b)
	_G["as_quest"]["money"]("get",30000)
	GI("as_quest_csky_main_3_reward")
end

function main_3_before_hit(npc,shit,bone_id,flags)
	if (shit and shit.draftsman and (shit.draftsman:id() == AC_ID)) then
		local task_id = "as_quest_csky_main_3"
		if not (M[task_id] and M[task_id]["0_dead"]) then
			shit.power = tonumber(shit.power) / 4
		end
	else
		flags.ret_value = false
	end
end

--=============================================================
--main_4
--=============================================================
STAGE_STATUS["main_4"] = function(tsk,task_id)
	if not M[task_id] then M[task_id] = {} end
	local sim = alife()
	local npc_sec = "as_npc_csky_main_4_monolith_attacker"
	local actor_lvl = level.name()
	
	if not (HI(task_id.."_state_3") or HI(task_id.."_coward")) then
		--[[
		if (actor_lvl and (actor_lvl ~= "jupiter")) then
			if not HI(task_id.."_coward") then
				GI(task_id.."_coward")
			end
		else
			for i=0,9 do
				local id = tonumber(M[task_id][i])
				if not (id) then
					local smart	= SIMBOARD.smarts_by_names["jup_sim_1"]
					local se = sim:create(npc_sec,smart.position,smart.m_level_vertex_id,smart.m_game_vertex_id)
					M[task_id][i] = se.id
				else
					if (M[task_id][i.."_dead"] ~= true) then
						local npc = id and sim:object(id)
						if not (npc and string.find(npc:name(),npc_sec) and npc:alive()) then
							M[task_id][i.."_dead"] = true
						end
					end
				end
			end
			
			local count = 0
			for i=0,9 do
				if (M[task_id][i.."_dead"] == true) then
					count = count + 1
				end
			end
			if (math.min(count,5) == 5) then
				if (M[task_id].half_dead ~= true) then
					M[task_id].half_dead = true
				end
			end
			if (math.min(count,10) == 10) then
				local npc = get_story_se_object("as_npc_csky_leader")
				if (npc) then
					if not HI(task_id.."_state_1") then
						_G["as_quest"]["message"](npc.id,"as_dialog_leader_csky_main_4_fight_state_1")
						GI(task_id.."_state_1")
						M[task_id] = {}
						return
					end
					if not HI(task_id.."_state_2") then
						_G["as_quest"]["message"](npc.id,"as_dialog_leader_csky_main_4_fight_state_2")
						GI(task_id.."_state_2")
						M[task_id] = {}
						return
					end
					if not HI(task_id.."_state_3") then
						_G["as_quest"]["message"](npc.id,"as_dialog_leader_csky_main_4_fight_state_3")
						GI(task_id.."_state_3")
						M[task_id] = {}
						return
					end
				end
			end
		end
		--]]
		--piss off base guards
		local squad = get_story_se_object("as_squad_csky_base_guard")
		local smart	= SIMBOARD.smarts_by_names[smart_base_jup]
		if (squad and smart) then
			for k in squad:squad_members() do
				local member = db.storage[k.id] and db.storage[k.id].object
				if (member and member:alive()) then
					xr_danger.set_script_danger(member,20000)
				end
			end
		end
		
		if not HI("as_quest_csky_defend_base") then
			GI("as_quest_csky_defend_base")
		end
	else
		for i=0,9 do
			local id = tonumber(M[task_id][i])
			local npc = id and sim:object(id)
			if (npc and string.find(npc:name(),npc_sec)) then
				safe_release_manager.release(npc)
			end
		end
		
		if HI("as_quest_csky_defend_base") then
			DI("as_quest_csky_defend_base")
		end
	end
	
	if HI(task_id.."_reward") and not HI("as_quest_csky_defend_base") then
		if not HI(task_id.."_complete") then
			GI(task_id.."_complete")
		end
	end
end

STAGE_TARGET["main_4"] = function(task_id,field,p,tsk)
	if (field == "target") then
		if not (HI(task_id.."_state_3") or HI(task_id.."_coward")) then
			local smart	= SIMBOARD.smarts_by_names[smart_base_jup]
			return smart and smart.id
		end
		local npc = get_story_se_object("as_npc_csky_leader")
		return npc and npc.id
	end
	
	if (field == "title") then
		return task_id.."_"..field
	end
	
	if (field == "descr") then
		return task_id.."_"..field..((HI(task_id.."_state_3") and "_2") or (HI(task_id.."_coward") and "_3") or "_1")
	end
end

function main_4_before_hit(npc,shit,bone_id,flags)
	if (shit and shit.draftsman and (shit.draftsman:id() ~= AC_ID)) then
		local task_id = "as_quest_csky_main_4"
		if (M[task_id] and M[task_id].half_dead) then
			return
		else
			if (npc and (npc.health < 0.8)) then
				shit.power = tonumber(shit.power) / 5
			else
				flags.ret_value = false
			end
		end
	end
end

function main_4_give(a,b)
	task_manager.get_task_manager():give_task("as_quest_csky_main_4")
end
function main_4_reward(a,b)
	if not HI("as_quest_csky_main_4_coward") then
		_G["as_quest"]["money"]("get",30000)
	end
	HI("as_quest_csky_main_4_reward")
end





--=============================================================
--QUEST TRADER
--=============================================================
STAGE_STATUS["trader_0"] = function(tsk,task_id)
	if HI(task_id.."_talk") then
		if not HI(task_id.."_complete") then
			GI(task_id.."_complete")
		end
	end
end

STAGE_TARGET["trader_0"] = function(task_id,field,p,tsk)
	if (field == "target") then
		local npc = get_story_se_object("as_npc_csky_trader")
		return npc and npc.id
	end
	
	if (field == "title") then
		return task_id.."_"..field
	end
	
	if (field == "descr") then
		return task_id.."_"..field
	end
end

--************************************************************

STAGE_STATUS["trader_1"] = function(tsk,task_id)
	if HI(task_id.."_reward") then
		if not HI(task_id.."_complete") then
			_G["as_quest"]["money"]("get",10000)
			GI(task_id.."_complete")
		end
		return
	end
	
	if not M[task_id] then M[task_id] = {} end
	local npc_sec = "as_npc_csky_trader_1_bandit"
	
	if not HI(task_id.."_deal") then
		local all_dead = true
		for i=1,10 do
			local npc_id = tonumber(M[task_id][i])
			if not (npc_id) then
				local smart	= SIMBOARD.smarts_by_names["red_smart_terrain_monsters_2"]
				local se = alife():create(npc_sec,smart.position,smart.m_level_vertex_id,smart.m_game_vertex_id)	
				M[task_id][i] = se.id
				all_dead = false
			end
			if (all_dead) then
				local npc = npc_id and alife():object(npc_id)
				if (npc and string.find(npc:name(),npc_sec) and npc:alive()) then
					all_dead = false
				end
			end
		end
		if (all_dead) then
			GI(task_id.."_deal")
		end
	else
		local actor_lvl = level.name()
		if (actor_lvl and not string.find(actor_lvl,"red_forest")) then
			for i=1,10 do
				local npc_id = tonumber(M[task_id][i])
				local npc =	npc_id and alife():object(npc_id)
				if (npc and string.find(npc:name(),npc_sec) and npc:alive()) then
					--printf("GhenTuong: release %s",npc:name())
					safe_release_manager.release(npc)
				end
			end
		end
	end
end

STAGE_TARGET["trader_1"] = function(task_id,field,p,tsk)
	if (field == "target") then
		if not HI(task_id.."_deal") then
			return
		end
		local npc = get_story_se_object("as_npc_csky_trader")
		return npc and npc.id
	end
	
	if (field == "title") then
		return task_id.."_"..field
	end
	
	if (field == "descr") then
		if not HI(task_id.."_deal") then
			if game_relations.is_factions_enemies(character_community(db.actor),"bandit") then
				return task_id.."_"..field.."_1"
			else
				return task_id.."_"..field.."_2"
			end
		end
		return task_id.."_"..field.."_3"
	end
end

function trader_1_give(a,b)
	task_manager.get_task_manager():give_task("as_quest_csky_trader_1")
end
function trader_1_has(a,b)
	return _G["as_quest"]["money"]("has",20000)
end
function trader_1_pay(a,b)
	_G["as_quest"]["money"]("pay",20000)
	GI("as_quest_csky_trader_1_deal")
end

--************************************************************

--=============================================================
--QUEST TECH
--=============================================================
STAGE_STATUS["tech_0"] = function(tsk,task_id)
	if HI(task_id.."_talk") then
		if not HI(task_id.."_complete") then
			GI(task_id.."_complete")
		end
	end
end

STAGE_TARGET["tech_0"] = function(task_id,field,p,tsk)
	if (field == "target") then
		local npc = get_story_se_object("as_npc_csky_tech")
		return npc and npc.id
	end
	
	if (field == "title") then
		return task_id.."_"..field
	end
	
	if (field == "descr") then
		return task_id.."_"..field
	end
end

--************************************************************

STAGE_STATUS["tech_1"] = function(tsk,task_id)
	if HI(task_id.."_reward") then
		if not HI(task_id.."_complete") then
			GI(task_id.."_complete")
		end
	end
	
	if not HI(task_id.."_boom") then
		local wpn_sec = "as_quest_csky_tech_1_wpn_toz34_mark4"
		if not xr_conditions.has_item(0,0,{tostring(wpn_sec)}) then
			alife_create_item(tostring(wpn_sec),db.actor)
		else
			local wpn = db.actor:active_item()
			if wpn and string.find(wpn:name(),wpn_sec) and (wpn:condition() < 1) then
				local h = hit()
				h.direction = VEC_ZERO
				h.draftsman = db.actor
				h.type = hit.fire_wound
				h:bone("bip01_spine")
				h.power = 0.1
				h.impulse = 1
				db.actor:hit(h)
				alife_release(wpn)
				GI(task_id.."_boom")
			end
		end
	end
end

STAGE_TARGET["tech_1"] = function(task_id,field,p,tsk)
	if (field == "target") then
		if not HI(task_id.."_boom") then
			return
		end
		local npc = get_story_se_object("as_npc_csky_tech")
		return npc and npc.id
	end
	
	if (field == "title") then
		return task_id.."_"..field
	end
	
	if (field == "descr") then
		if not HI(task_id.."_boom") then
			return task_id.."_"..field.."_1"
		end
		return task_id.."_"..field.."_2"
	end
end

function tech_1_give(a,b)
	task_manager.get_task_manager():give_task("as_quest_csky_tech_1")
end

--=============================================================
--QUEST MEDIC
--=============================================================
STAGE_STATUS["medic_0"] = function(tsk,task_id)
	if HI(task_id.."_talk") then
		if not HI(task_id.."_complete") then
			GI(task_id.."_complete")
		end
	end
	
	if HI(task_id.."_help") and not HI(task_id.."_item") then
		local item = M[task_id] and alife():object(M[task_id])
		if not item then
			local smart	= SIMBOARD.smarts_by_names["mar_smart_terrain_doc_2"]
			local se = alife():create("af_soul",vector():set(-160,1,250),smart.m_level_vertex_id,smart.m_game_vertex_id)
			M[task_id] = se.id
		else
			if (item:section_name() == "af_soul") then
				if (item.parent_id == 65535) then
					return
				end
				if (item.parent_id == AC_ID) then
					GI(task_id.."_item")
				else
					alife_release(item)
					M[task_id] = nil
				end
			else
				alife_release(item)
				M[task_id] = nil
			end
		end
	end
end

STAGE_TARGET["medic_0"] = function(task_id,field,p,tsk)
	if (field == "target") then
		if not HI(task_id.."_help") then
			local npc = get_story_se_object("as_npc_csky_medic")
			return npc and npc.id or nil
		end
		if not HI(task_id.."_item") then
			local item = M[task_id] and alife():object(M[task_id])
			return item and item.id or nil
		end
		if not medic_0_has_item(0,0) then
			return
		end
		local npc = get_story_se_object("as_npc_csky_medic")
		return npc and npc.id or nil
	end
	
	if (field == "title") then
		return task_id.."_"..field
	end
	
	if (field == "descr") then
		if not HI(task_id.."_help") then
			return task_id.."_"..field.."_1"
		end
		if not HI(task_id.."_item") then
			return task_id.."_"..field.."_2"
		end
		if not medic_0_has_item(0,0) then
			return task_id.."_"..field.."_3"
		end
		return task_id.."_"..field.."_4"
	end
end

function medic_0_has_item(a,b)
	return xr_conditions.has_item(0,0,{"af_soul"})
end

--************************************************************

STAGE_STATUS["medic_1"] = function(tsk,task_id)
	if HI(task_id.."_reward") then
		if not HI(task_id.."_complete") then
			local reward = {
				"bandage",
				"bandage",
				"bandage",
				"stimpack",
				"stimpack",
				"stimpack"
			}
			_G["as_quest"]["reward"](reward)
			GI(task_id.."_complete")
		end
		return
	end
end

STAGE_TARGET["medic_1"] = function(task_id,field,p,tsk)
	if (field == "target") then
		if not (HI(task_id.."_reward") or medic_1_has_item(0,0)) then
			return
		end
		local npc = get_story_se_object("as_npc_csky_medic")
		return npc and npc.id
	end
	
	if (field == "title") then
		return task_id.."_"..field
	end
	
	if (field == "descr") then
		local function st_name(s)
			return game.translate_string("st_"..s.."_name")
		end
		local text =st_name("cutlery").."\n"..st_name("swiss_knife").."\n"..st_name("grooming")
		return game.translate_string(task_id.."_"..field).."\n"
	end
end

function medic_1_give(a,b)
	task_manager.get_task_manager():give_task("as_quest_csky_medic_1")
end
function medic_1_has_item(a,b)
	local p = {"cutlery","swiss_knife","grooming"}
	for i,v in pairs(p) do
		if not xr_conditions.has_item(0,0,{tostring(v)}) then
			return false
		end
	end
	return true
end
function medic_1_release_item(a,b)
	local p = {"cutlery","swiss_knife","grooming"}
	for i,v in pairs(p) do
		news_manager.relocate_item(0,"out",tostring(v),1)
		xr_effects.release_item(0,0,{tostring(v)})
	end
end








--=============================================================
function quest_progress(quest,tsk,task_id,field,p)
	if (M and tostring(quest)) then
		if (field) then
			return STAGE_TARGET[tostring(quest)] and STAGE_TARGET[tostring(quest)](task_id,field,p,tsk)
		else
			return STAGE_STATUS[tostring(quest)] and STAGE_STATUS[tostring(quest)](tsk,task_id)
		end
	end
end

function pick_logic(actor,npc,p)
	if (p and #p == 2) then
		local quest = p[1]
		local index = p[2]
		return M and M[quest] and (M[quest][index] == npc:id())
	end
	return false
end

--=============================================================
function guard_before_hit(npc,shit,bone_id,flags)
	if (shit and shit.power) then
		shit.power = shit.power / 4
	end
end

function spawn_base0()
	local smart	= SIMBOARD.smarts_by_names[smart_base_jup]
	
end

function leader_hello(a,b)
	return game.translate_string("as_dialog_leader_hello_idle_"..tostring(math.random(1,5)))
end

function trader_hello(a,b)
	return game.translate_string("as_dialog_trader_hello_idle_"..tostring(math.random(1,5)))
end
function trader_trade(a,b)
	return game.translate_string("as_dialog_trader_trade_"..tostring(math.random(1,5)))
end

function tech_hello(a,b)
	return game.translate_string("as_dialog_tech_hello_idle_"..tostring(math.random(1,5)))
end
function tech_trade(a,b)
	return game.translate_string("as_dialog_tech_trade_"..tostring(math.random(1,5)))
end
function tech_mechanic(a,b)
	return game.translate_string("as_dialog_tech_mechanic_"..tostring(math.random(1,5)))
end

function medic_hello(a,b)
	return game.translate_string("as_dialog_medic_hello_idle_"..tostring(math.random(1,5)))
end
function medic_trade(a,b)
	return game.translate_string("as_dialog_medic_trade_"..tostring(math.random(1,5)))
end

--=============================================================
function set_logic(actor,squad,p)
	for k in squad:squad_members() do
		if k.online then
			local npc = k.id and (db.storage[k.id] and db.storage[k.id].object or level.object_by_id(k.id))
			xr_logic.set_new_scheme_and_logic(npc,nil,nil,"logic",nil,p[1])
		end
	end
end



cmd = debug_cmd_list.command_get_list()
function cmd.cskymain0()
	task_manager.get_task_manager():give_task("as_quest_csky_main_0")
end
function cmd.cskymain1()
	task_manager.get_task_manager():give_task("as_quest_csky_main_1")
end
function cmd.cskymain2()
	task_manager.get_task_manager():give_task("as_quest_csky_main_2")
end
function cmd.cskymain3()
	task_manager.get_task_manager():give_task("as_quest_csky_main_3")
end
function cmd.cskymain4()
	task_manager.get_task_manager():give_task("as_quest_csky_main_4")
end
function cmd.cskyguard()
	utils_obj.create_squad("as_squad_csky_base_guard",smart_base_jup)
end

function cmd.cskybase()
	as_static_object.smart_static_object(nil,nil,{"jup_b205_smart_terrain","static_object_leader"})
end

function cmd.cskyleader()
	if not get_story_se_object("as_npc_csky_leader") then
		local smart	= SIMBOARD.smarts_by_names[smart_base_jup]
		local se = alife():create("as_npc_csky_leader",smart.position,smart.m_level_vertex_id,smart.m_game_vertex_id)
	end
end

function cmd.cskytest()
	GI("as_quest_csky_defend_base")
end

function cmd.cskyshoot()
	local smart	= SIMBOARD.smarts_by_names[smart_base_jup]
	local se = alife():create("as_shooting_target_1",smart.position,smart.m_level_vertex_id,smart.m_game_vertex_id)
end