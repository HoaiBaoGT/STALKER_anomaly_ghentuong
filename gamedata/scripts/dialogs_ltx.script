--[[----------------------------------------------------------------------------------------------------
	Description:
	Now you can write dialog with ltx config files.
	
	Need: dialogs
	Get: ltx files, script files
	Kill: xml files
	
	In .xml file:
	<dialog id="as_hunter_3_follower_end">
		<init_func>tasks_zaton_hunter.as_hunter_3_follower_end</init_func>
    </dialog>
	
	
	function my_ini_dialog(dialog)
		dialogs_ltx.ini_dialog(dialog,file_path,section)
	end
	
	dialog: just put dialog from parameters here.
	file_path: ltx file path.
	section : each section is one dialog.
	==========
	In .ltx file:
	[section]
	ad = 0|1|text_id_1|cond_file.cond_function|action_file.action_function
	ad = 1|2|text_file.text_function|cond_file.cond_function|action_file.action_function
------------------------------------------------------------------------------------------------------]]

local function TRACE_BUG(text)
	local debug_s = tostring(debug.getinfo(2,"S").source)
	local debug_n = tostring(debug.getinfo(2,"n").name)
	local debug_l = tostring(debug.getinfo(2,"l").currentline)
	printf(debug_s.."."..debug_n.."|"..debug_l..": "..text)
end

--[[----------------------------------------------------------------------------------------------------
	Chores
------------------------------------------------------------------------------------------------------]]
local HI, GI, DI = has_alife_info, give_info, disable_info

local function set_saved_dialog(dialog)
	return ka_dialog.set_saved_dialog(dialog)
end
local function add_dialog(p_id, id, phrase_id, cond, act)
	return ka_dialog.add_dialog(p_id, id, phrase_id, cond, act)
end
local function add_script_dialog(p_id, id, phrase_id, cond, act)
	return ka_dialog.add_script_dialog(p_id, id, phrase_id, cond, act)
end
--Info is gay
local dialog_info = {}
local function info_precondition(a,b)
	
end
local function info_action(a,b)
	return false
end
--[[----------------------------------------------------------------------------------------------------
	Main
------------------------------------------------------------------------------------------------------]]
function ini_dialog(dialog,file_path,section)
	set_saved_dialog(dialog)
	
	if not (tostring(file_path) and tostring(section)) then
		TRACE_BUG("file_path and section must be strings")
	end
	local ini = ini_file(file_path)
	if not (ini and ini:section_exist(section)) then
		TRACE_BUG("dialog path isn't correct: file = "..tostring(file_path)..", section = "..tostring(section))
	end
	
	local result, id, value = "", "", ""
	local n = ini:line_count(section)
	for i=0,n-1 do
		result, id, value = ini:r_line_ex(section,i,"","")
		local p = str_explode(value,"|")
		
		if (p and (math.min(#p,3) == 3)) then
			local con_table = ((p[4] ~= nil) and string.find(p[4],".") and str_explode(p[4],",")) or nil
			local art_table = ((p[5] ~= nil) and string.find(p[5],".") and str_explode(p[5],",")) or nil
			local con = (con_table and (#con_table == 1) and con_table[1]) or con_table
			local art = (art_table and (#art_table == 1) and art_table[1]) or art_table
			
			if (id == "ad") then
				if (string.find(p[3],".")) then
					add_script_dialog(p[1],p[2],p[3],con,art)
				else
					add_dialog(p[1],p[2],p[3],con,art)
				end
			end
		else
			TRACE_BUG("not enough parameter")
		end
	end
end
